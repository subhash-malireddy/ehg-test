// function createColors2 () {
//     const colorRange = colorSteps32();
//     let i = 0;

//     let colors = new Uint8ClampedArray(256*128*4)
//     let colors2 = []
//     for(let r=colorRange[0]; r<=colorRange.at(-1); r+=8){
//         for(let g=colorRange[0]; g<=colorRange.at(-1); g+=8){
//             for(let b=colorRange[0]; b<=colorRange.at(-1); b+=8){
//                 // const color = {r, g, b}
//                 // colors.push(color)
//                 colors2.push(r)
//                 colors2.push(g)
//                 colors2.push(b)
//                 colors[i+0] = r
//                 colors[i+1] = b
//                 colors[i+2] = g
//                 colors[i+3] = 255
//                 i+=4
//             }
//         }
//     }
//     console.log(new Set(colors2).size)
//     console.log(colors2)
//     return colors2
// }



// function createColors () {
//     let clrGenComplete = false;

//     let colors = new Uint8ClampedArray(256*128*4)
//     let colors2 = []
//     let clrsIndex = 0
//     let color = [8, 8, 8]

    
//     while(!clrGenComplete){
//         colors[clrsIndex+0] = color[2]
//         colors[clrsIndex+1] = color[1]
//         colors[clrsIndex+2] = color[0]
//         colors[clrsIndex+3] = 255
//         colors2.push(color[2])
//         colors2.push(color[1])
//         colors2.push(color[0])
//         clrsIndex+=4

//         color[0]+=8;

//         if(color[0] === 264){
//             color[1]+=8;
//             color[0] = 8;
//         }

//         if (color[1] === 264) {
//             color[2]+=8;
//             color[1] = 8;
//          }
//          if (color[2] === 264) {
//             clrGenComplete = true;
//          }

//     }

//     console.log(colors2)
//     console.log(new Set(colors2).size)
//     return colors2
// }

// (function () {
//     const colors1 = createColors2()
//     const colors2 = createColors()
//     console.log(Array.isArray(colors1) &&
//     Array.isArray(colors2) &&
//     colors1.length === colors2.length) && colors1.every((val, index) => val === colors2[index]);
// })()